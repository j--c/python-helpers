#!/bin/bash

write_gitignore() {
    touch .gitignore
    echo "# Byte-compiled / optimized / DLL files" >> .gitignore
    echo "__pycache__/" >> .gitignore
    echo "*.py[cod]" >> .gitignore
    echo "*.py.class" >> .gitignore
    echo "" >> .gitignore
    echo "# Package decorator" >> .gitignore
    echo "__init__.py" >> .gitignore
    echo "" >> .gitignore
    echo "# Virtual environment" >> .gitignore
    echo "venv/" >> .gitignore
    echo "" >> .gitignore
    echo "# Migrations / Alembic" >> .gitignore
    echo "migrations/" >> .gitignore
    echo "" >> .gitignore
    echo "# Databases" >> .gitignore
    echo "*.db" >> .gitignore
}

init_unittest() {
    mkdir -p "test"
    touch "test/__init__.py"
}

init_bdd() {
    mkdir -p "test/features/steps"
    touch "test/__init__.py"
    touch "test/features/__init__.py"
    touch "test/features/steps/__init__.py"
}

install_pip_pkgs() {
    if [ $1 = $bdd ]; then
        local pip_log="pip.log"
        touch $pip_log
        pip install behave >> $pip_log
        pip install PyHamcrest >> $pip_log
    fi
}

init_virtual_env() {
    python3 -m venv venv
    source venv/bin/activate
}

init_project_dir() {
    mkdir -p "$1/$1"
    cd "$1"
    touch "$1/__init__.py"
}

# -------------------------------------
# Print Menu
# -------------------------------------
print_menu() {
    menu_h_border="========================================"
    menu_v_border="= "
    echo "$menu_h_border"
    echo "$menu_v_border" "$1"
    echo "$menu_h_border"
    for ((i=2;i<=$#;i++)); do 
        num=$(($i-1))
        echo "$menu_v_border" "$num" "${!i}"
    done
    echo "$menu_h_border"
}

# -------------------------------------
# Get Input From User
# -------------------------------------
get_input_from_user() {
    local input=0
    read -n 1 user_opt 
    for ((i=1; i<=$#; i++)); do 
        num=$(($i-1))
        if [ "$user_opt" -eq "$num" ]; then
            input="$user_opt"
        fi
    done
    echo " "
    return "$input"
}

# -------------------------------------
# Main
# -------------------------------------
main () {

    # ---------------
    # constants
    # ---------------
    has_err=0   # error flag

    bdd=1
    unittest=2
    notst=3

    init_file="__init__.py"

    test_menu_opts=("Enter number of your 'test' framework." "Behave" "Unittest" "None")
    invalid_test_selection="Invalid testing method entered!"

    # ---------------
    # prompt user about what test environment to use
    # ---------------
    test_input=0
    while [ $test_input -eq 0 ]
    do
        print_menu "${test_menu_opts[@]}"
        if [ "$has_err" -eq 1 ]; then
            echo "$invalid_test_selection"
        fi
        get_input_from_user "${test_menu_opts[@]}"
        test_input=$?
        if [ "$test_input" -eq 0 ]; then
            has_err=1
            clear
        fi
    done

    echo "Creating project directory..."
    init_project_dir $1

    echo "Creating virtual environment..."
    init_virtual_env

    if [ $test_input -eq $bdd ]; then
        echo "Installing pip packages..."
        install_pip_pkgs test_input
        echo "Initializing Behave framework ..."
        init_bdd
    elif [ $test_input -eq $unittest ]; then
        echo "Initializing Unittest framework ..."
        init_unittest
    fi

    echo "Writing .gitignore..."
    write_gitignore

    echo "Creating git repo..."
    git init -b main

    echo ""
    echo "Project successfully created!"
    echo ""
}

clear
main $1
