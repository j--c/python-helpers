#!/bin/bash

# called from init_git
write_gitignore() {
    echo "Writing .gitignore..."
    file_path="$(realpath ${1})/.gitignore"
    touch "${file_path}"
     echo "# Byte-compiled / optimized / DLL files" >> ${file_path}
     echo "__pycache__/" >> ${file_path}
     echo "*.py[cod]" >> ${file_path}
     echo "*.py.class" >> ${file_path}
     echo "" >> ${file_path}
     echo "# Package decorator" >> ${file_path}
     echo "__init__.py" >> ${file_path}
     echo "" >> ${file_path}
     echo "# Virtual environment" >> ${file_path}
     echo "venv/" >> ${file_path}
     echo "" >> ${file_path}
     echo "# Migrations / Alembic" >> ${file_path}
     echo "migrations/" >> ${file_path}
     echo "" >> ${file_path}
     echo "# Databases" >> ${file_path}
     echo "*.db" >> ${file_path}
}


# called from init_project_dir and init_unittest and init_src_dir
write_init() {
    echo "Writing __init__.py..."
    file_path="$(realpath ${1})/__init__.py"
    touch "${file_path}"
}


# called from main
init_git() {
    echo "Initializing git..."
    echo "Creating git repo..."
    local project_dir_path=${1}
    write_gitignore ${project_dir_path}
    cd ${project_dir_path}
    git init -b main
    cd ..
}


# called from main
init_src_dir() {
    echo "Initializing src directory..."
    local project_dir_path=${1}
    local src_path="$(realpath ${project_dir_path})/${project_name}"
    mkdir ${src_path}
    write_init ${src_path}
}


# called from main
init_unittest_dir() {
    echo "Initializing unittest directory..."
    local project_dir_path=${1}
    local unittest_path="$(realpath ${project_dir_path})/test"
    mkdir ${unittest_path}
    write_init ${unittest_path}
}


# called from main
install_pips() {
    cd ${1}
    echo "activating vm ..."
    source venv/bin/activate

    pip install python-lsp-server
    pip install flake8-black
    pip install pep8

    echo "deactivating vm ..."
    deactivate
    cd ..
}


# called from main
init_virtual_env() {
    local project_dir_path=${1}
    local venv_path="$(realpath ${project_dir_path})/venv"
    echo "Initializing virtual environment..."
    python3 -m venv ${venv_path}
    echo ${venv_path}
}


# called from main
init_project_dir() {
    echo "Initializing project directory..."
    local project_dir_path=${1}
    mkdir -p "${project_dir_path}"
    write_init ${project_dir_path}
}


# called from main
yes_no_question() {
    read -p "${1} (y/n)" -n 1 -r
    echo $REPLY
}


# called from main
get_project_dir_path() {
    local project_dir_path="$(realpath $PWD)/${1}"
    echo $project_dir_path
}


# called from main
confirm_project_name() {
    if [ -z "${1}" ]; then
        echo "ERROR: python-project requires a project name as an argument!"
        exit 1
    fi
}


# called from main
print_script_header() {
    clear

    echo "****************************************"
    echo "****         PYTHON-PROJECT         ****"
    echo "****              j__c              ****"
    echo "****************************************"
    echo ""
}

main() {

    print_script_header

    # establish project name and project dir
    #
    local project_name=${1}
    confirm_project_name ${project_name}
    local project_dir_path=$(get_project_dir_path ${project_name})

    # confirm that user wants to create project
    #
    echo "Create a project in:"
    local continue=$(yes_no_question "${project_dir_path}?")
    [[ ! $continue =~ ^(y|Y)$ ]] && exit 1

    echo ""
    echo ""
    echo ""

    echo "---- Project Creation ----"

    init_project_dir "${project_dir_path}"
    init_git "${project_dir_path}"
    init_src_dir "${project_dir_path}" "${project_name}"
    init_unittest_dir "${project_dir_path}"
    init_virtual_env "${project_dir_path}"
    install_pips "${project_dir_path}"
}


main ${1}
exit 0
