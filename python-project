#!/bin/bash

# called from init_project_dir
write_gitignore() {
    echo "Writing .gitignore..."
    file_path="$(realpath ${1})/.gitignore"
    touch "${file_path}"
     echo "# Byte-compiled / optimized / DLL files" >> ${file_path}
     echo "__pycache__/" >> ${file_path}
     echo "*.py[cod]" >> ${file_path}
     echo "*.py.class" >> ${file_path}
     echo "" >> ${file_path}
     echo "# Package decorator" >> ${file_path}
     echo "__init__.py" >> ${file_path}
     echo "" >> ${file_path}
     echo "# Virtual environment" >> ${file_path}
     echo "venv/" >> ${file_path}
     echo "" >> ${file_path}
     echo "# Migrations / Alembic" >> ${file_path}
     echo "migrations/" >> ${file_path}
     echo "" >> ${file_path}
     echo "# Databases" >> ${file_path}
     echo "*.db" >> ${file_path}
}


# called from init_project_dir and init_unittest and init_bdd_dir
write_init() {
    echo "Writing __init__.py..."
    file_path="$(realpath ${1})/__init__.py"
    touch "${file_path}"
}


# called from main
init_git() {
    echo "Initializing git..."
    echo "Creating git repo..."
    local project_dir_path=${1}
    write_gitignore ${project_dir_path}
    cd ${project_dir_path}
    git init -b main
    cd ..
}


# called from main
init_src_dir() {
    echo "Initializing src directory..."
    local project_dir_path=${1}
    local src_path="$(realpath ${project_dir_path})/${project_name}"
    mkdir ${src_path}
    write_init ${src_path}
}


# called from main
init_unittest_dir() {
    echo "Initializing unittest directory..."
    local project_dir_path=${1}
    local unittest_path="$(realpath ${project_dir_path})/test"
    mkdir ${unittest_path}
    write_init ${unittest_path}
}


# called from main
init_bdd_dir() {
    local project_dir_path=${1}
    local unittest_path="$(realpath ${project_dir_path})/test"
    mkdir ${unittest_path}
    local features_path="$(realpath ${unittest_path})/features"
    mkdir ${features_path}
    local steps_path="$(realpath ${features_path})/steps"
    mkdir ${steps_path}
    write_init ${features_path}
    write_init ${steps_path}

    local pip_log="pip.log"
    touch $pip_log
    pip install behave >> $pip_log
    pip install PyHamcrest >> $pip_log
}


# called from main
init_virtual_env() {
    local project_dir_path=${1}
    local venv_path="$(realpath ${project_dir_path})/venv"
    echo "Initializing virtual environment..."
    python3 -m venv ${venv_path}
    echo ${venv_path}
}


# called from main
init_project_dir() {
    echo "Initializing project directory..."
    local project_dir_path=${1}
    mkdir -p "${project_dir_path}"
    write_init ${project_dir_path}
}


# called from main
get_project_dir_path() {
    local project_dir_path="$(realpath $PWD)/${1}"
    echo $project_dir_path
}


# called from main
get_menu_selection() {
    PS3=${1}
    select selection in ${@:2};
    do
        if [[ -n ${selection} ]]; then
            break
        else
            PS3="Invalid selection!  Try again: "
        fi
    done
    echo ${selection}
}


main() {
    clear

    local tf_instr='Enter the number of the test framework you want: '
    local tf_opts=('behave' 'none')
    local tf=$(get_menu_selection "${tf_instr}" "${tf_opts[@]}")

    clear

    local virt_instr='Install a virtual environment? (1=yes, 2=no) '
    local virt_opts=('yes' 'no')
    local virt=$(get_menu_selection "${virt_instr}" "${virt_opts[@]}")

    clear

    local project_name=${1}
    local project_dir_path=$(get_project_dir_path ${project_name})

    init_project_dir "${project_dir_path}"
    init_git "${project_dir_path}"
    init_src_dir "${project_dir_path}" "${project_name}"
    init_unittest_dir "${project_dir_path}"

    if [ "${tf}" == "behave" ]; then
        init_bdd_dir "${project_dir_path}"
    fi

    if [ "${virt}" == "yes" ]; then
        init_virtual_env "${project_dir_path}"
    fi
}


main ${1}
