#!/bin/bash


# -------------------------------------
# Some variable declaration
# -------------------------------------
bdd=1
unttst=2
notst=3
prj_name=$1
src_dir=$1
tst_dir='test'
init_file='__init__.py'


init_unttst() {
    mkdir -p $tst_dir/$prj_name
    touch $tst_dir/$init_file
    touch $tst_dir/$prj_name/$init_file
}

init_bdd() {
    local ftrs_dir='features'
    local stps_dir='steps'
    mkdir -p $tst_dir/$ftrs_dir/$stps_dir
    touch $tst_dir/$init_file
    touch $tst_dir/$ftrs_dir/$init_file
    touch $tst_dir/$ftrs_dir/$stps_dir/$init_file
}

# -------------------------------------
# Install pip packages
# -------------------------------------
inst_pip_pkgs() {
    local pip_log="pip.log"

    touch $pip_log
    if [ $tst_inpt = $bdd ]; then
        pip install behave >> $pip_log
        pip install PyHamcrest >> $pip_log
    fi
}

# -------------------------------------
# Write .gitignore
# -------------------------------------
wrt_gitignore() {
    touch .gitignore
    echo "# Byte-compiled / optimized / DLL files" >> .gitignore
    echo "__pycache__/" >> .gitignore
    echo "*.py[cod]" >> .gitignore
    echo "*.py.class" >> .gitignore
    echo "" >> .gitignore
    echo "# Package decorator" >> .gitignore
    echo "__init__.py" >> .gitignore
    echo "" >> .gitignore
    echo "# Virtual environment" >> .gitignore
    echo "venv/" >> .gitignore
    echo "" >> .gitignore
    echo "# Migrations / Alembic" >> .gitignore
    echo "migrations/" >> .gitignore
    echo "" >> .gitignore
    echo "# Databases" >> .gitignore
    echo "*.db" >> .gitignore
}

init_venv() {
    python3 -m venv venv
    source venv/bin/activate
}

init_prj_dir() {
    mkdir $prj_name
    cd $prj_name
    mkdir -p $prj_name
    touch $prj_name/$init_file
}

# -------------------------------------
# Get Test Input From User
# -------------------------------------
get_inpt_frm_usr() {
    local input=0
    read -n 1 usr_opt 
    for ((i=2;i<=$#;i++)); do 
        num=$(($i-1))
        if [ $usr_opt = $num ]; then
            input=$usr_opt
        fi
    done
    echo $spcr
    return $input
}


# -------------------------------------
# Print Testing Menu
# -------------------------------------
prnt_mnu() {
    mnu_spcr="="
    spcr=""
    mnu_h_brdr="========================================"
    mnu_v_brdr="= "
    echo "$mnu_h_brdr"
    echo "$mnu_v_brdr" "$1"
    echo "$mnu_h_brdr"
    for ((i=2;i<=$#;i++)); do 
        num=$(($i-1))
        echo "$mnu_v_brdr" "$num" "${!i}"
    done
    echo "$mnu_h_brdr"
}

# -------------------------------------
# Main
# -------------------------------------
main () {
    test_mnu_opts=("Enter number of your 'test' framework." "Behave" "Unittest" "None")
    prnt_mnu "${test_mnu_opts[@]}"
    get_inpt_frm_usr "${test_mnu_opts[@]}"
    tst_inpt=$?


    if [ $tst_inpt = 0 ]; then
        echo $spcr
        echo "Invalid testing method entered!"
        echo $spcr
    else
        echo "Creating project directory..."
        init_prj_dir

        venv_mnu_opts=("Create a Virtual Environment." "Yes" "No")
        prnt_mnu "${venv_mnu_opts[@]}"
        get_inpt_frm_usr "${venv_mnu_opts[@]}"
        vnv_inpt=$?

        if [ $vnv_inpt = 1 ]; then
            echo "Creating virtual environment..."
            init_venv
        fi

        echo "Installing pip packages..."
        inst_pip_pkgs

        if [ $tst_inpt = $bdd ]; then
            echo "Initializing Behave framework ..."
            init_bdd
        elif [ $tst_inpt = $unttst ]; then
            echo "Initializing Unittest framework ..."
            init_unttst
        fi

        echo "Writing .gitignore..."
        wrt_gitignore

        echo "Creating git repo..."
        git init -b main

        echo ""
        echo "Project successfully created!"
        echo ""
    fi
}

clear
main
