#!/bin/bash


write_gitignore() {
    touch .gitignore
    echo "# Byte-compiled / optimized / DLL files" >> .gitignore
    echo "__pycache__/" >> .gitignore
    echo "*.py[cod]" >> .gitignore
    echo "*.py.class" >> .gitignore
    echo "" >> .gitignore
    echo "# Package decorator" >> .gitignore
    echo "__init__.py" >> .gitignore
    echo "" >> .gitignore
    echo "# Virtual environment" >> .gitignore
    echo "venv/" >> .gitignore
    echo "" >> .gitignore
    echo "# Migrations / Alembic" >> .gitignore
    echo "migrations/" >> .gitignore
    echo "" >> .gitignore
    echo "# Databases" >> .gitignore
    echo "*.db" >> .gitignore
}


init_unittest() {
    mkdir -p "test"
    touch "test/__init__.py"
}


init_bdd() {
    mkdir -p "test/features/steps"
    touch "test/__init__.py"
    touch "test/features/__init__.py"
    touch "test/features/steps/__init__.py"
}


install_pip_pkgs() {
    if [ $1 = $bdd ]; then
        local pip_log="pip.log"
        touch $pip_log
        pip install behave >> $pip_log
        pip install PyHamcrest >> $pip_log
    fi
}


init_virtual_env() {
    python3 -m venv venv
    source venv/bin/activate
}


init_project_dir() {
    mkdir -p "$1/$1"
    cd "$1"
    touch "$1/__init__.py"
}


# Print Menu
# -------------------------------------
print_menu() {

    menu_h_border="$1"
    for ((i=1;i<50;i++)); do 
        menu_h_border="$menu_h_border$1"
    done
    menu_v_border=" "
    echo "$menu_h_border"
    echo "$menu_v_border" "$2"
    echo "$menu_h_border"
    for ((i=3;i<=$#;i++)); do 
        num=$(($i-2))
        echo ""
        echo "$menu_v_border" "$num" "${!i}"
    done

}


# Get Number Input 
# -------------------------------------
get_number_input() {

    # variables for this function
    local in=0
    local user_opt=0

    # read integer input from user into user_opt
    read -n 1 user_opt 

    # loop through menu options if user_opt = menu option number
    # set input to the user_opt
    for ((i=1; i<=$#; i++)); do 
        num=$(($i-2))
        if [ "$user_opt" -eq "$num" ]; then
            in="$user_opt"
        fi
    done
    echo " "

    # return in
    return "$in"

}


# Get Number Input 
# -------------------------------------
get_menu_input() {

    # clear screen
    clear

    # invalid selection message constant
    local invalid_selection="Invalid response entered!"

    # variables for this function
    local input=0             # input value default
    local has_err=0           # error flag 

    # loop to get input
    while [ $input -eq 0 ]
    do
        # print menu with the opts passed in
        print_menu "${@}"

        # if input error show invalid response
        if [ "$has_err" -eq 1 ]; then
            echo ""
            echo "$invalid_selection"
        fi

        # get number input
        echo ""
        get_number_input "${@}"
        input=$?

        # if input returned is 0 - set error flag and clear screen
        if [ "$input" -eq 0 ]; then
            has_err=1
            clear
        fi
    done
    return $input

}

# 
# Main
# 
main () {
    
    # constants
    test_menu_opts=("-" "Enter number of your 'test' framework." "Behave" "Unittest" "None")
    bdd=1
    unittest=2
    notst=3

    virtual_menu_opts=("-" "Install a virtual environment?" "Yes" "No")
    virtual_yes=1
    virtual_no=2

    get_menu_input "${test_menu_opts[@]}"
    test_menu_input=$?

    get_menu_input "${virtual_menu_opts[@]}"
    virtual_menu_input=$?

    clear 

    echo "Test environment = $test_menu_input"
    echo "Virtual environment = $virtual_menu_input"

    echo "Creating project directory..."
    init_project_dir $1

    if [ $virtual_menu_input -eq $virtual_yes ]; then
        echo "Creating virtual environment..."
        init_virtual_env
    fi

    if [ $test_menu_input -eq $bdd ]; then
        echo "Installing pip packages..."
        install_pip_pkgs test_input
        echo "Initializing Behave framework ..."
        init_bdd
    elif [ $test_menu_input -eq $unittest ]; then
        echo "Initializing Unittest framework ..."
        init_unittest
    fi

    echo "Writing .gitignore..."
    write_gitignore

    echo "Creating git repo..."
    git init -b main

    echo ""
    echo "Project successfully created!"
    echo ""

}

main $1
